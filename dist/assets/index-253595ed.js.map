{"version":3,"file":"index-253595ed.js","sources":["../../src/script.js"],"sourcesContent":["import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls.js\";\nimport gsap from \"gsap\";\n\n/**\n * Base\n */\n// Canvas\nconst canvas = document.querySelector(\"canvas.webgl\");\n\n// Scene\nconst scene = new THREE.Scene();\n\n/**\n * Textures\n */\nconst textureLoader = new THREE.TextureLoader();\nconst sphereTexture = textureLoader.load('Designer (44).jpeg'); // Replace with your sphere image path\nconst panoramaTextures = [\n  textureLoader.load('Designer (7).jpeg'),\n  textureLoader.load(' Screenshot 2024-09-15 020915.png'),\n  textureLoader.load(' Screenshot 2024-09-15 020626.png'),\n  textureLoader.load(' Screenshot 2024-09-15 021117.png'),\n  textureLoader.load(' Screenshot 2024-09-15 020953.png'),\n  textureLoader.load(' Screenshot 2024-09-15 020712.png')\n]; // Add your 6 panorama textures\n\n// Background texture\nconst backgroundTexture = textureLoader.load('Designer (25).jpeg'); // Replace with your background image path\nscene.background = backgroundTexture;\n\n/**\n * Sphere\n */\nconst geometry = new THREE.SphereGeometry(1, 32, 32); // Main sphere geometry\nconst material = new THREE.MeshBasicMaterial({ map: sphereTexture });\nconst sphereMesh = new THREE.Mesh(geometry, material);\nscene.add(sphereMesh);\n\n/**\n * Points and Lines\n */\nconst points = [\n  new THREE.Vector3(0.7, 0.7, 0.7),\n  new THREE.Vector3(-0.7, 0.7, 0.7),\n  new THREE.Vector3(0.7, -0.7, 0.7),\n  new THREE.Vector3(-0.7, -0.7, 0.7),\n  new THREE.Vector3(0.7, 0.7, -0.7),\n  new THREE.Vector3(-0.7, 0.7, -0.7)\n];\n\npoints.forEach((point, index) => {\n  const pointGeometry = new THREE.SphereGeometry(0.05, 16, 16); // Bigger sphere for point\n  const pointMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 }); // Yellow color\n  const pointMesh = new THREE.Mesh(pointGeometry, pointMaterial);\n  pointMesh.position.copy(point);\n  scene.add(pointMesh);\n\n  // Line from the sphere's center to the point, longer line (10cm in world units)\n  const lineMaterial = new THREE.LineBasicMaterial({ color: 0xffff00 });\n  const lineGeometry = new THREE.BufferGeometry().setFromPoints([\n    new THREE.Vector3(0, 0, 0),\n    point.clone().multiplyScalar(1.1) // 10% longer than the point position\n  ]);\n  const line = new THREE.Line(lineGeometry, lineMaterial);\n  scene.add(line);\n\n  pointMesh.userData.index = index; // Store the index to identify the point\n});\n\n/**\n * Sizes\n */\nconst sizes = {\n  width: window.innerWidth * 0.75,  // 75% of the screen width\n  height: window.innerHeight,\n};\n\nwindow.addEventListener(\"resize\", () => {\n  // Update sizes\n  sizes.width = window.innerWidth * 0.75;  // 75% of the screen width\n  sizes.height = window.innerHeight;\n\n  // Update camera\n  camera.aspect = sizes.width / sizes.height;\n  camera.updateProjectionMatrix();\n\n  // Update renderer\n  renderer.setSize(sizes.width, sizes.height);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n});\n\n/**\n * Camera\n */\nconst camera = new THREE.PerspectiveCamera(\n  75,\n  sizes.width / sizes.height,\n  0.1,\n  100\n);\ncamera.position.set(2, 2, 2); // Move the camera back slightly\nscene.add(camera);\n\n// Controls\nconst controls = new OrbitControls(camera, canvas);\ncontrols.enableDamping = true;\n\n/**\n * Renderer\n */\nconst renderer = new THREE.WebGLRenderer({\n  canvas: canvas,\n});\nrenderer.setSize(sizes.width, sizes.height);\nrenderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n\n/**\n * Raycaster\n */\nconst raycaster = new THREE.Raycaster();\nconst mouse = new THREE.Vector2();\n\n/**\n * Exit Button\n */\nconst exitButton = document.createElement('button');\nexitButton.style.position = 'absolute';\nexitButton.style.top = '10px';\nexitButton.style.left = '10px'; // Changed to the left side\nexitButton.style.padding = '10px 20px';\nexitButton.style.backgroundColor = '#ff0000';\nexitButton.style.color = '#ffffff';\nexitButton.style.border = 'none';\nexitButton.style.borderRadius = '5px';\nexitButton.style.cursor = 'pointer';\nexitButton.style.display = 'none';\nexitButton.textContent = 'Exit';\ndocument.body.appendChild(exitButton);\n\nexitButton.addEventListener('click', () => {\n  exitPanorama();\n});\n\n/**\n * Animate\n */\nconst clock = new THREE.Clock();\n\nconst tick = () => {\n  const elapsedTime = clock.getElapsedTime();\n\n  // Rotate the sphere\n  sphereMesh.rotation.y = elapsedTime * 0.1;\n\n  // Update controls\n  controls.update();\n\n  // Render\n  renderer.render(scene, camera);\n\n  // Call tick again on the next frame\n  window.requestAnimationFrame(tick);\n};\n\ntick();\n\n/**\n * Mouse Events\n */\ncanvas.addEventListener('click', (event) => {\n  mouse.x = (event.clientX / sizes.width) * 2 - 1;\n  mouse.y = -(event.clientY / sizes.height) * 2 + 1;\n\n  raycaster.setFromCamera(mouse, camera);\n\n  const intersects = raycaster.intersectObjects(scene.children.filter(obj => obj.type === 'Mesh' && obj.geometry.type === 'SphereGeometry' && obj.material.color.equals(new THREE.Color(0xffff00))));\n  if (intersects.length > 0) {\n    const pointIndex = intersects[0].object.userData.index;\n    if (pointIndex !== undefined) {\n      // Animate camera to zoom in\n      const targetPosition = intersects[0].point.clone().normalize().multiplyScalar(0.7); // Adjust zoom level\n      gsap.to(camera.position, {\n        duration: 1,\n        x: targetPosition.x,\n        y: targetPosition.y,\n        z: targetPosition.z,\n        onComplete: () => {\n          // Show the panorama for the clicked point\n          showPanorama(pointIndex);\n        }\n      });\n    }\n  }\n});\n\n/**\n * Show 360-Degree Panorama\n */\nfunction showPanorama(index) {\n  // Hide the original sphere and yellow points\n  sphereMesh.visible = false;\n  scene.children.forEach(child => {\n    if (child.material && child.material.color.equals(new THREE.Color(0xffff00))) {\n      child.visible = false;\n    }\n  });\n\n  // Add the panorama\n  const panoramaGeometry = new THREE.SphereGeometry(5, 64, 64);\n  const panoramaMaterial = new THREE.MeshBasicMaterial({\n    map: panoramaTextures[index],\n    side: THREE.DoubleSide\n  });\n  const panoramaMesh = new THREE.Mesh(panoramaGeometry, panoramaMaterial);\n  scene.add(panoramaMesh);\n\n  // Show the exit button\n  exitButton.style.display = 'block';\n\n  // Reset the camera position inside the panorama\n  camera.position.set(0, 0, 0.1);\n  controls.target.set(0, 0, 0);\n  controls.update();\n}\n\n/**\n * Exit Panorama View\n */\nfunction exitPanorama() {\n  // Remove the panorama from the scene\n  const panoramaMeshes = scene.children.filter(child => child instanceof THREE.Mesh && child.geometry.type === 'SphereGeometry' && child.material.map && child.material.map !== backgroundTexture);\n  panoramaMeshes.forEach(mesh => scene.remove(mesh));\n\n  // Reset scene background\n  scene.background = backgroundTexture;\n\n  // Show the original sphere and yellow points\n  sphereMesh.visible = true;\n  scene.add(sphereMesh);\n\n  points.forEach((point, index) => {\n    const pointMesh = new THREE.Mesh(\n      new THREE.SphereGeometry(0.05, 16, 16),\n      new THREE.MeshBasicMaterial({ color: 0xffff00 })\n    );\n    pointMesh.position.copy(point);\n    pointMesh.userData.index = index;\n    scene.add(pointMesh);\n\n    // Line from the sphere's center to the point\n    const lineMaterial = new THREE.LineBasicMaterial({ color: 0xffff00 });\n    const lineGeometry = new THREE.BufferGeometry().setFromPoints([\n      new THREE.Vector3(0, 0, 0),\n      point.clone().multiplyScalar(1.1)\n    ]);\n    const line = new THREE.Line(lineGeometry, lineMaterial);\n    scene.add(line);\n  });\n\n  // Hide the exit button\n  exitButton.style.display = 'none';\n\n  // Reset camera position and controls\n  camera.position.set(2, 2, 2);\n  controls.target.set(0, 0, 0);\n  controls.update();\n}\n"],"names":["canvas","scene","THREE.Scene","textureLoader","THREE.TextureLoader","sphereTexture","panoramaTextures","backgroundTexture","geometry","THREE.SphereGeometry","material","THREE.MeshBasicMaterial","sphereMesh","THREE.Mesh","points","THREE.Vector3","point","index","pointGeometry","pointMaterial","pointMesh","lineMaterial","THREE.LineBasicMaterial","lineGeometry","THREE.BufferGeometry","line","THREE.Line","sizes","camera","renderer","THREE.PerspectiveCamera","controls","OrbitControls","THREE.WebGLRenderer","raycaster","THREE.Raycaster","mouse","THREE.Vector2","exitButton","exitPanorama","clock","THREE.Clock","tick","elapsedTime","event","intersects","obj","THREE.Color","pointIndex","targetPosition","gsap","showPanorama","child","panoramaGeometry","panoramaMaterial","THREE.DoubleSide","panoramaMesh","mesh"],"mappings":"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"}